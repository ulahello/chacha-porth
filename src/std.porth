const NULL 0 cast(ptr) end

const true  1 cast(bool) end
const false 0 cast(bool) end

const sizeof(u64) 8 end
const sizeof(u32) 4 end
const sizeof(ptr) sizeof(u64) end
const sizeof(bool) sizeof(u64) end
const sizeof(int) sizeof(u64) end
const sizeof(addr) sizeof(u64) end

/// Standard streams
const stdin  0 end
const stdout 1 end
const stderr 2 end

inline proc @ptr ptr -- ptr in @64 cast(ptr) end
inline proc @@ptr ptr -- ptr in @ptr @ptr end
inline proc @bool ptr -- bool in @64 cast(bool) end
inline proc @int ptr -- int in @64 end
inline proc @addr ptr -- addr in @int cast(addr) end

inline proc !bool bool ptr in !64 end
inline proc !ptr ptr ptr in !64 end
inline proc !int int ptr in !64 end
inline proc !addr addr ptr in !64 end

/// Syscalls
// Stolen from https://filippo.io/linux-syscall-table/
// Not all of the syscalls here are useful/implemented. I literally just copy-pasted them.
// We can clean this up later.
const SYS_read 0 end
const SYS_write 1 end
const SYS_open 2 end
const SYS_close 3 end
const SYS_stat 4 end
const SYS_fstat 5 end
const SYS_lstat 6 end
const SYS_poll 7 end
const SYS_lseek 8 end
const SYS_mmap 9 end
const SYS_mprotect 10 end
const SYS_munmap 11 end
const SYS_brk 12 end
const SYS_rt_sigaction 13 end
const SYS_rt_sigprocmask 14 end
const SYS_rt_sigreturn 15 end
const SYS_ioctl 16 end
const SYS_pread64 17 end
const SYS_pwrite64 18 end
const SYS_readv 19 end
const SYS_writev 20 end
const SYS_access 21 end
const SYS_pipe 22 end
const SYS_select 23 end
const SYS_sched_yield 24 end
const SYS_mremap 25 end
const SYS_msync 26 end
const SYS_mincore 27 end
const SYS_madvise 28 end
const SYS_shmget 29 end
const SYS_shmat 30 end
const SYS_shmctl 31 end
const SYS_dup 32 end
const SYS_dup2 33 end
const SYS_pause 34 end
const SYS_nanosleep 35 end
const SYS_getitimer 36 end
const SYS_alarm 37 end
const SYS_setitimer 38 end
const SYS_getpid 39 end
const SYS_sendfile 40 end
const SYS_socket 41 end
const SYS_connect 42 end
const SYS_accept 43 end
const SYS_sendto 44 end
const SYS_recvfrom 45 end
const SYS_sendmsg 46 end
const SYS_recvmsg 47 end
const SYS_shutdown 48 end
const SYS_bind 49 end
const SYS_listen 50 end
const SYS_getsockname 51 end
const SYS_getpeername 52 end
const SYS_socketpair 53 end
const SYS_setsockopt 54 end
const SYS_getsockopt 55 end
const SYS_clone 56 end
const SYS_fork 57 end
const SYS_vfork 58 end
const SYS_execve 59 end
const SYS_exit 60 end
const SYS_wait4 61 end
const SYS_kill 62 end
const SYS_uname 63 end
const SYS_semget 64 end
const SYS_semop 65 end
const SYS_semctl 66 end
const SYS_shmdt 67 end
const SYS_msgget 68 end
const SYS_msgsnd 69 end
const SYS_msgrcv 70 end
const SYS_msgctl 71 end
const SYS_fcntl 72 end
const SYS_flock 73 end
const SYS_fsync 74 end
const SYS_fdatasync 75 end
const SYS_truncate 76 end
const SYS_ftruncate 77 end
const SYS_getdents 78 end
const SYS_getcwd 79 end
const SYS_chdir 80 end
const SYS_fchdir 81 end
const SYS_rename 82 end
const SYS_mkdir 83 end
const SYS_rmdir 84 end
const SYS_creat 85 end
const SYS_link 86 end
const SYS_unlink 87 end
const SYS_symlink 88 end
const SYS_readlink 89 end
const SYS_chmod 90 end
const SYS_fchmod 91 end
const SYS_chown 92 end
const SYS_fchown 93 end
const SYS_lchown 94 end
const SYS_umask 95 end
const SYS_gettimeofday 96 end
const SYS_getrlimit 97 end
const SYS_getrusage 98 end
const SYS_sysinfo 99 end
const SYS_times 100 end
const SYS_ptrace 101 end
const SYS_getuid 102 end
const SYS_syslog 103 end
const SYS_getgid 104 end
const SYS_setuid 105 end
const SYS_setgid 106 end
const SYS_geteuid 107 end
const SYS_getegid 108 end
const SYS_setpgid 109 end
const SYS_getppid 110 end
const SYS_getpgrp 111 end
const SYS_setsid 112 end
const SYS_setreuid 113 end
const SYS_setregid 114 end
const SYS_getgroups 115 end
const SYS_setgroups 116 end
const SYS_setresuid 117 end
const SYS_getresuid 118 end
const SYS_setresgid 119 end
const SYS_getresgid 120 end
const SYS_getpgid 121 end
const SYS_setfsuid 122 end
const SYS_setfsgid 123 end
const SYS_getsid 124 end
const SYS_capget 125 end
const SYS_capset 126 end
const SYS_rt_sigpending 127 end
const SYS_rt_sigtimedwait 128 end
const SYS_rt_sigqueueinfo 129 end
const SYS_rt_sigsuspend 130 end
const SYS_sigaltstack 131 end
const SYS_utime 132 end
const SYS_mknod 133 end
const SYS_uselib 134 end
const SYS_personality 135 end
const SYS_ustat 136 end
const SYS_statfs 137 end
const SYS_fstatfs 138 end
const SYS_sysfs 139 end
const SYS_getpriority 140 end
const SYS_setpriority 141 end
const SYS_sched_setparam 142 end
const SYS_sched_getparam 143 end
const SYS_sched_setscheduler 144 end
const SYS_sched_getscheduler 145 end
const SYS_sched_get_priority_max 146 end
const SYS_sched_get_priority_min 147 end
const SYS_sched_rr_get_interval 148 end
const SYS_mlock 149 end
const SYS_munlock 150 end
const SYS_mlockall 151 end
const SYS_munlockall 152 end
const SYS_vhangup 153 end
const SYS_modify_ldt 154 end
const SYS_pivot_root 155 end
const SYS__sysctl 156 end
const SYS_prctl 157 end
const SYS_arch_prctl 158 end
const SYS_adjtimex 159 end
const SYS_setrlimit 160 end
const SYS_chroot 161 end
const SYS_sync 162 end
const SYS_acct 163 end
const SYS_settimeofday 164 end
const SYS_mount 165 end
const SYS_umount2 166 end
const SYS_swapon 167 end
const SYS_swapoff 168 end
const SYS_reboot 169 end
const SYS_sethostname 170 end
const SYS_setdomainname 171 end
const SYS_iopl 172 end
const SYS_ioperm 173 end
const SYS_create_module 174 end
const SYS_init_module 175 end
const SYS_delete_module 176 end
const SYS_get_kernel_syms 177 end
const SYS_query_module 178 end
const SYS_quotactl 179 end
const SYS_nfsservctl 180 end
const SYS_getpmsg 181 end
const SYS_putpmsg 182 end
const SYS_afs_syscall 183 end
const SYS_tuxcall 184 end
const SYS_security 185 end
const SYS_gettid 186 end
const SYS_readahead 187 end
const SYS_setxattr 188 end
const SYS_lsetxattr 189 end
const SYS_fsetxattr 190 end
const SYS_getxattr 191 end
const SYS_lgetxattr 192 end
const SYS_fgetxattr 193 end
const SYS_listxattr 194 end
const SYS_llistxattr 195 end
const SYS_flistxattr 196 end
const SYS_removexattr 197 end
const SYS_lremovexattr 198 end
const SYS_fremovexattr 199 end
const SYS_tkill 200 end
const SYS_time 201 end
const SYS_futex 202 end
const SYS_sched_setaffinity 203 end
const SYS_sched_getaffinity 204 end
const SYS_set_thread_area 205 end
const SYS_io_setup 206 end
const SYS_io_destroy 207 end
const SYS_io_getevents 208 end
const SYS_io_submit 209 end
const SYS_io_cancel 210 end
const SYS_get_thread_area 211 end
const SYS_lookup_dcookie 212 end
const SYS_epoll_create 213 end
const SYS_epoll_ctl_old 214 end
const SYS_epoll_wait_old 215 end
const SYS_remap_file_pages 216 end
const SYS_getdents64 217 end
const SYS_set_tid_address 218 end
const SYS_restart_syscall 219 end
const SYS_semtimedop 220 end
const SYS_fadvise64 221 end
const SYS_timer_create 222 end
const SYS_timer_settime 223 end
const SYS_timer_gettime 224 end
const SYS_timer_getoverrun 225 end
const SYS_timer_delete 226 end
const SYS_clock_settime 227 end
const SYS_clock_gettime 228 end
const SYS_clock_getres 229 end
const SYS_clock_nanosleep 230 end
const SYS_exit_group 231 end
const SYS_epoll_wait 232 end
const SYS_epoll_ctl 233 end
const SYS_tgkill 234 end
const SYS_utimes 235 end
const SYS_vserver 236 end
const SYS_mbind 237 end
const SYS_set_mempolicy 238 end
const SYS_get_mempolicy 239 end
const SYS_mq_open 240 end
const SYS_mq_unlink 241 end
const SYS_mq_timedsend 242 end
const SYS_mq_timedreceive 243 end
const SYS_mq_notify 244 end
const SYS_mq_getsetattr 245 end
const SYS_kexec_load 246 end
const SYS_waitid 247 end
const SYS_add_key 248 end
const SYS_request_key 249 end
const SYS_keyctl 250 end
const SYS_ioprio_set 251 end
const SYS_ioprio_get 252 end
const SYS_inotify_init 253 end
const SYS_inotify_add_watch 254 end
const SYS_inotify_rm_watch 255 end
const SYS_migrate_pages 256 end
const SYS_openat 257 end
const SYS_mkdirat 258 end
const SYS_mknodat 259 end
const SYS_fchownat 260 end
const SYS_futimesat 261 end
const SYS_newfstatat 262 end
const SYS_unlinkat 263 end
const SYS_renameat 264 end
const SYS_linkat 265 end
const SYS_symlinkat 266 end
const SYS_readlinkat 267 end
const SYS_fchmodat 268 end
const SYS_faccessat 269 end
const SYS_pselect6 270 end
const SYS_ppoll 271 end
const SYS_unshare 272 end
const SYS_set_robust_list 273 end
const SYS_get_robust_list 274 end
const SYS_splice 275 end
const SYS_tee 276 end
const SYS_sync_file_range 277 end
const SYS_vmsplice 278 end
const SYS_move_pages 279 end
const SYS_utimensat 280 end
const SYS_epoll_pwait 281 end
const SYS_signalfd 282 end
const SYS_timerfd_create 283 end
const SYS_eventfd 284 end
const SYS_fallocate 285 end
const SYS_timerfd_settime 286 end
const SYS_timerfd_gettime 287 end
const SYS_accept4 288 end
const SYS_signalfd4 289 end
const SYS_eventfd2 290 end
const SYS_epoll_create1 291 end
const SYS_dup3 292 end
const SYS_pipe2 293 end
const SYS_inotify_init1 294 end
const SYS_preadv 295 end
const SYS_pwritev 296 end
const SYS_rt_tgsigqueueinfo 297 end
const SYS_perf_event_open 298 end
const SYS_recvmmsg 299 end
const SYS_fanotify_init 300 end
const SYS_fanotify_mark 301 end
const SYS_prlimit64 302 end
const SYS_name_to_handle_at 303 end
const SYS_open_by_handle_at 304 end
const SYS_clock_adjtime 305 end
const SYS_syncfs 306 end
const SYS_sendmmsg 307 end
const SYS_setns 308 end
const SYS_getcpu 309 end
const SYS_process_vm_readv 310 end
const SYS_process_vm_writev 311 end
const SYS_kcmp 312 end
const SYS_finit_module 313 end

const AT_FDCWD 0 100 - end

const O_RDONLY 0 end
const O_WRONLY 1 end
const O_RDWR   2 end
const O_CREAT 64 end
const O_TRUNC 512 end
const O_NONBLOCK 2048 end

const F_SETFL 4 end
const F_GETFL 3 end

const EAGAIN 11 end

const CLOCK_MONOTONIC 1 end
const TIMER_ABSTIME 1 end

const MAP_PRIVATE 2 end
const MAP_ANONYMOUS 32 end
const PROT_READ 1 end
const PROT_WRITE 2 end

const timespec.tv_sec  sizeof(int) offset end
const timespec.tv_nsec sizeof(int) offset end
const sizeof(timespec) reset end

inline proc ptr+ ptr int -- ptr in
  swap cast(int)
  swap cast(int)
  +
  cast(ptr)
end
inline proc ptr- ptr int -- ptr in
  swap cast(int)
  swap cast(int)
  -
  cast(ptr)
end
inline proc ptr!= ptr ptr -- bool in
  swap cast(int)
  swap cast(int)
  !=
end
inline proc ptr= ptr ptr -- bool in
  swap cast(int)
  swap cast(int)
  =
end
inline proc ptr< ptr ptr -- bool in
  swap cast(int)
  swap cast(int)
  <
end
inline proc +ptr int ptr -- ptr in
  cast(int) + cast(ptr)
end

inline proc ptr-diff ptr ptr -- int in
  swap cast(int)
  swap cast(int)
  -
end

const sizeof(stat) 144 end
inline proc stat.st_dev     ptr -- ptr in 0   ptr+ end
inline proc stat.st_ino     ptr -- ptr in 8   ptr+ end
inline proc stat.st_mode    ptr -- ptr in 24  ptr+ end
inline proc stat.st_nlink   ptr -- ptr in 16  ptr+ end
inline proc stat.st_uid     ptr -- ptr in 28  ptr+ end
inline proc stat.st_gid     ptr -- ptr in 32  ptr+ end
inline proc stat.st_rdev    ptr -- ptr in 40  ptr+ end
inline proc stat.st_size    ptr -- ptr in 48  ptr+ end
inline proc @stat.st_size   ptr -- int in stat.st_size @64 end
inline proc stat.st_blksize ptr -- ptr in 56  ptr+ end
inline proc stat.st_blocks  ptr -- ptr in 64  ptr+ end
inline proc stat.st_atim    ptr -- ptr in 72  ptr+ end
inline proc stat.st_mtim    ptr -- ptr in 88  ptr+ end
inline proc stat.st_ctim    ptr -- ptr in 104 ptr+ end
const sizeof(stat.st_dev) sizeof(u64) end
const sizeof(stat.st_ino) sizeof(u64) end
const sizeof(stat.st_mode) sizeof(u32) end
const sizeof(stat.st_nlink) sizeof(u64) end
const sizeof(stat.st_uid) sizeof(u32) end
const sizeof(stat.st_gid) sizeof(u32) end
const sizeof(stat.st_rdev) sizeof(u64) end
const sizeof(stat.st_size) sizeof(u64) end
const sizeof(stat.st_blksize) sizeof(u64) end
const sizeof(stat.st_blocks) sizeof(u64) end
const sizeof(stat.st_atim) sizeof(timespec) end
const sizeof(stat.st_mtim) sizeof(timespec) end
const sizeof(stat.st_ctim) sizeof(timespec) end

// Wrappers for common syscalls
inline proc write int ptr int -- int in SYS_write syscall3 end
inline proc read int ptr int -- int in SYS_read syscall3 end
inline proc openat int int ptr int -- int in SYS_openat syscall4 end
inline proc fstat ptr int -- int in SYS_fstat syscall2 end
inline proc stat ptr ptr -- int in SYS_stat syscall2 end
inline proc close int -- int in SYS_close syscall1 end
inline proc exit int in SYS_exit syscall1 drop end
inline proc mmap int int int int int ptr -- int in SYS_mmap syscall6 end
inline proc clock_nanosleep ptr ptr int int -- int in SYS_clock_nanosleep syscall4 end
inline proc clock_gettime ptr int -- int in SYS_clock_gettime syscall2 end
inline proc fork -- int in SYS_fork syscall0 end
inline proc getpid -- int in SYS_getpid syscall0 end
inline proc execve ptr ptr ptr -- int in SYS_execve syscall3 end
inline proc wait4 ptr int ptr int -- int in SYS_wait4 syscall4 end
inline proc rename ptr ptr -- int in SYS_rename syscall2 end
inline proc fcntl int int int -- int in SYS_fcntl syscall3 end

inline proc /    int int -- int in divmod drop end
inline proc %    int int -- int in divmod swap drop end
inline proc mod  int int -- int in % end
inline proc div  int int -- int in / end
inline proc imod int int -- int in idivmod swap drop end
inline proc idiv int int -- int in idivmod drop end
inline proc emod int int -- int in
  let a b in
    a
    b imod
    b +
    b imod
  end
end

inline proc nth_argv int -- ptr in
  8 * argv +ptr @64 cast(ptr)
end

inline proc lnot bool -- bool in
  cast(int) 1 - cast(bool)
end

inline proc land bool bool -- bool in
  swap cast(int)
  swap cast(int)
  and
  cast(bool)
end

inline proc lor bool bool -- bool in
  swap cast(int)
  swap cast(int)
  or
  cast(bool)
end

inline proc inc64-by ptr int in over @64 + swap !64 end
inline proc inc64 ptr in dup @64 1 + swap !64 end
inline proc dec64 ptr in dup @64 1 - swap !64 end
inline proc inc32 ptr in dup @32 1 + swap !32 end
inline proc dec32 ptr in dup @32 1 - swap !32 end
inline proc inc8 ptr in dup @8 1 + swap !8 end
inline proc dec8 ptr in dup @8 1 - swap !8 end

proc swap64 ptr ptr in
  memory a sizeof(u64) end
  memory b sizeof(u64) end
  dup  @64 b !64
  over @64 a !64
  a @64 swap !64
  b @64 swap !64
end

proc cstrlen ptr -- int in
  dup
  while dup @8 0 != do 1 ptr+ end
  swap ptr-diff
end

proc cstreq ptr ptr -- bool in
  while
    over @8 0 != over @8 0 != land if
       over @8 over @8 =
    else
       false
    end
  do
    1 ptr+ swap 1 ptr+
  end
  @8 0 =
  swap @8 0 =
  land
end

inline proc cstr-to-str ptr -- int ptr in dup cstrlen swap end

// TODO: fputs should crash the app if write fails
inline proc fputs int ptr int in write drop end
inline proc puts int ptr in stdout fputs end
inline proc eputs int ptr in stderr fputs end

inline proc WIFSTOPPED int -- bool in
  // (((x) & 0xff) == 0x7f)
  here eputs ": TODO: WIFSTOPPED is not implemented\n" eputs
  1 exit
  cast(bool)
end

inline proc WIFCONTINUED int -- bool in
  // ((x) == 0xffff)

  here eputs ": TODO: WIFCONTINUED is not implemented\n" eputs
  1 exit
  cast(bool)
end

inline proc WIFSIGNALED int -- bool in
  // (((signed char) (((x) & 0x7f) + 1) >> 1) > 0)
  127 and // 0x7f
  1 +
  1 shr
  0 >
end

inline proc WIFEXITED int -- bool in
  // (((x) & 0x7f) == 0)
  127 // 0x7f
  and
  0 =
end

inline proc WEXITSTATUS int -- int in
  // (((x) & 0xff00) >> 8)
  65280 // 0xff00
  and
  8 shr
end

const offsetof(Str.count) sizeof(u64) offset end
const offsetof(Str.data) sizeof(ptr) offset end
const sizeof(Str) reset end

inline proc Str.count ptr -- ptr in offsetof(Str.count) ptr+ end
inline proc Str.data ptr -- ptr in offsetof(Str.data) ptr+ end
inline proc @Str.count ptr -- int in Str.count @64 end
inline proc @Str.data ptr -- ptr in Str.data  @64 cast(ptr) end
inline proc !Str.count int ptr in Str.count !64 end
inline proc !Str.data ptr ptr in Str.data  !64 end

inline proc @Str ptr -- int ptr in
  dup @Str.count
  swap @Str.data
end

inline proc !Str int ptr ptr in
  dup rot swap
  !Str.data
  !Str.count
end

inline proc str-chop-one-left ptr in
   dup Str.count dec64
       Str.data inc64
end

inline proc str-chop-one-right ptr in
  Str.count dec64
end

proc ?space int -- bool in
       dup ' '  = if  true
  else dup '\n' = if* true
  else dup '\r' = if* true
  else false end
  swap drop
end

proc str-trim-left ptr in // input --
  while
    dup @Str.count 0 > if
      dup @Str.data @8 ?space
    else false end
  do
    dup str-chop-one-left
  end
  drop
end

proc str-chop-by-predicate
  addr // predicate
  ptr // dst
  ptr // src
in
  memory predicate sizeof(addr) end
  rot predicate !addr
  over over @Str.data swap !Str.data
  over 0 swap !Str.count
  while
    dup @Str.count 0 > if
       dup @Str.data @8 predicate @addr call-like ?space lnot
    else false end
  do
    dup str-chop-one-left
    swap dup Str.count inc64 swap
  end
  dup @Str.count 0 > if
    dup str-chop-one-left
  end
  drop drop
end


proc str-chop-by-delim
  int // delim
  ptr // dst
  ptr // src
in
  memory delim sizeof(u64) end
  rot delim !64
  over over @Str.data swap !Str.data
  over 0 swap !Str.count
  while
    dup @Str.count 0 > if
       dup @Str.data @8 delim @64 !=
    else false end
  do
    dup str-chop-one-left
    swap dup Str.count inc64 swap
  end
  dup @Str.count 0 > if
    dup str-chop-one-left
  end
  drop drop
end

proc str-starts-with
  int ptr // prefix
  int ptr // input
  --
  bool
in
  memory prefix sizeof(Str) end
  memory input sizeof(Str) end
  input  !Str
  prefix !Str

  prefix @Str.count
  input  @Str.count
  <= if
    0 while
      dup prefix @Str.count < if
        dup  input  @Str.data +ptr @8
        over prefix @Str.data +ptr @8
        =
      else false end
    do 1 + end
    prefix @Str.count >=
  else false end
end

inline proc ?str-empty ptr -- bool in
  offsetof(Str.count) ptr+
  @64
  0 =
end

proc streq
  int ptr
  int ptr
  --
  bool
in
  while
    let n1 s1 n2 s2 in
      n1 s1 n2 s2
      n1 0 > n2 0 > land if
        s1 @8 s2 @8 =
      else false end
    end
  do
    let n1 s1 n2 s2 in
      n1 1 -
      s1 1 ptr+
      n2 1 -
      s2 1 ptr+
    end
  end

  let n1 _ n2 _ in
    n1 0 = n2 0 = land
  end
end

// TODO: rename isdigit to ?digit
inline proc isdigit int -- bool in
  let x in
    x '0' >=
    x '9' <=
    land
  end
end

// TODO: rename isalpha to ?alpha
inline proc isalpha int -- bool in
  let x in
    x 'a' >=
    x 'z' <=
    land

    x 'A' >=
    x 'Z' <=
    land

    lor
  end
end

// TODO: rename isalnum to ?alnum
inline proc isalnum int -- bool in
  let x in
    x isdigit
    x isalpha
    lor
  end
end

proc try-parse-int
  int ptr
  --
  int bool
in
  memory input sizeof(Str) end
  input !Str

  0 while
    input @Str.count 0 > if
      input @Str.data @8 isdigit
    else false end
  do
    10 * input @Str.data @8 '0' - +
    input str-chop-one-left
  end

  input @Str.count 0 <=
end

const PUTU_BUFFER_CAP 32 end
// TODO: fputu should fail if write call fails
// TODO: fputu does not print negative numbers
proc fputu
  int // number
  int // fd
in
  memory buffer PUTU_BUFFER_CAP end
  memory fd sizeof(u64) end
  fd !64

  dup 0 = if
    "0" fd @64 fputs
  else
    buffer PUTU_BUFFER_CAP ptr+
    while over 0 != do
      1 ptr- dup rot
      10 divmod
      rot swap '0' + swap !8 swap
    end

    dup
    buffer PUTU_BUFFER_CAP ptr+ swap ptr-diff swap fd @64 fputs
  end
  drop
end

proc fput0u
  int // number
  int // padding
  int // fd
in
  memory buffer PUTU_BUFFER_CAP end
  memory fd sizeof(int) end
  fd !int
  memory padding sizeof(int) end
  padding !int
  memory number sizeof(int) end
  number !int

  // *********9010
  //          ^

  buffer PUTU_BUFFER_CAP ptr+
  while
    padding @int 0 >
    number  @int 0 >
    lor
  do
    1 ptr-

    number @int
    10 divmod
    '0' +
    rot over over !8
    rot number !int
    swap drop

    padding dec64
  end

  dup buffer PUTU_BUFFER_CAP ptr+ swap ptr-diff swap fd @64 fputs
end

// TODO: implement putx that prints a number in hex

inline proc putu int in stdout fputu end
inline proc put0u int int in stdout fput0u end
inline proc eputu int in stderr fputu end

// TODO: there is no fputi function that would print signed integers

proc memcpy
  int // size
  ptr // src
  ptr // dst
  --
  ptr // dst
in
  memory src sizeof(ptr) end
  memory dst sizeof(ptr) end
  memory result sizeof(ptr) end
  dst !64
  src !64
  dst @ptr swap // result
  while dup 0 > do
    src @ptr @8
    dst @ptr !8
    src inc64
    dst inc64
    1 -
  end drop
end

proc memset
  int // size
  int // byte
  ptr // data
  --
  ptr // data
in
  memory data sizeof(ptr) end
  data !64
  memory byte sizeof(u64) end
  byte !64
  data @ptr swap
  while dup 0 > do
    byte @64 data @ptr !8
    data inc64
    1 -
  end
  drop
end

memory rand-state sizeof(u64) end

inline proc srand int in
  rand-state !64
end

// Stolen from https://en.wikipedia.org/wiki/Linear_congruential_generator
// Using the values of MMIX by Donald Knuth
const RAND_A 6364136223846793005 end
const RAND_C 1442695040888963407 end

inline proc rand -- int in
  rand-state @64
  RAND_A *
  RAND_C +
  dup
  rand-state !64
end

proc getenv
  int ptr // name as str
  --
  ptr     // value as cstr
in
  memory name sizeof(Str) end
  name !Str

  memory env-name sizeof(Str) end
  memory env-value  sizeof(Str) end

  envp
  while
    dup @ptr NULL ptr!= if
      dup @ptr cstr-to-str env-value !Str
      '=' env-name env-value str-chop-by-delim
      env-name @Str name @Str streq lnot
    else false end
  do 8 ptr+ end

  NULL ptr!= if
    env-value @Str.data
  else
    NULL
  end
end

// 8MB of temporary scratch buffer
const TMP_CAP 8 1024 * 1024 * end
memory tmp-start TMP_CAP end
memory tmp-size sizeof(u64) end

inline proc tmp-clean in 0 tmp-size !64 end
inline proc tmp-end -- ptr in tmp-start tmp-size @64 ptr+ end
// TODO: make tmp-rewind to fill up the "freed" memory with some recognizable pattern like 0xcccccccc
// It should be probably enabled in some special debug mode, cause it's a runtime cost
inline proc tmp-rewind ptr in tmp-start ptr-diff tmp-size !int end

proc tmp-alloc
  int
  --
  ptr // result
in
  dup tmp-size @64 + TMP_CAP > if
    here eputs ": Temporary memory buffer capacity exceeded. Need to call tmp-clean more often\n" eputs
    1 exit
  end

  dup 0 tmp-end memset
  tmp-size @64 rot + tmp-size !64
end

inline proc tmp-str-to-cstr int ptr -- ptr in over 1 + tmp-alloc memcpy end
inline proc tmp-append int ptr -- ptr in over tmp-alloc memcpy end
inline proc tmp-append-ptr ptr in
  sizeof(ptr) tmp-alloc !ptr
end

proc execvp
  ptr // argv
  ptr // file
in
  memory argvp sizeof(ptr) end
  argvp !64

  memory file-path sizeof(ptr) end
  file-path !64

  envp
  argvp @ptr
  file-path @ptr
  execve drop

  memory paths sizeof(Str) end
  memory path sizeof(Str) end

  "PATH" getenv

  dup NULL ptr= if
    "Could not find $PATH\n" eputs
    1 exit
  else
    dup cstr-to-str paths !Str
    while paths @Str.count 0 > do
      ':' path paths str-chop-by-delim

      tmp-end
      path @Str                  tmp-append drop
      "/"                        tmp-append drop
      file-path @ptr cstr-to-str tmp-append drop
      1                          tmp-alloc  drop  // NULL terminator

      envp swap
      argvp @ptr swap
      execve drop
    end
  end
  drop

  here eputs ": ERROR: could not find executable `" eputs file-path @ptr cstr-to-str eputs "`\n" eputs
  1 exit
end

/// Appends an item to a fixed size array
/// returns `true` when succeeds, `false` when overflow
proc append-item
  int // item size
  ptr // item
  int // array capacity
  ptr // array
  ptr // array count
  --
  int  // index of the appended item
  bool // true - appended, false - not enough space
in
  memory count sizeof(ptr) end
  count !ptr
  memory array sizeof(ptr) end
  array !ptr

  count @ptr @int > if
    over
    count @ptr @int *
    array @ptr +ptr
    memcpy drop

    count @ptr @int
    count @ptr inc64

    true
  else
    drop drop
    0 false
  end
end

/// Convert unsigned integer to string stored in the tmp scratch buffer
proc tmp-utos
  int
  --
  int ptr
in
  memory buffer sizeof(ptr) end
  PUTU_BUFFER_CAP tmp-alloc buffer !ptr

  dup 0 = if
    drop
    buffer @ptr PUTU_BUFFER_CAP ptr+ 1 ptr-
    '0' over !64
    1 swap
  else
    buffer @ptr PUTU_BUFFER_CAP ptr+
    while over 0 > do
      1 ptr- dup rot
      10 divmod
      rot swap '0' + swap !8 swap
    end

    swap drop

    dup buffer @ptr PUTU_BUFFER_CAP ptr+ swap ptr-diff swap
  end
end

// TODO: there is no way to unmap the file
proc map-file
  ptr // file-path-cstr
  --
  int ptr
in
  memory file-path-cstr sizeof(ptr) end
  file-path-cstr !64

  0                   // mode
  O_RDONLY            // flags
  file-path-cstr @ptr // pathname
  // TODO: this is lame, let's just support negative numbers properly
  0 100 - // AT_FDCWD            // dirfd
  openat

  dup 0 < if
    "ERROR: could not open file " eputs file-path-cstr @ptr cstr-to-str eputs "\n" eputs
    1 exit
  end

  memory fd sizeof(u64) end
  fd !64

  memory statbuf sizeof(stat) end
  statbuf fd @64 fstat 0 < if
    "ERROR: could not determine the size of file " eputs file-path-cstr @ptr cstr-to-str eputs "\n" eputs
    1 exit
  end

  memory content sizeof(Str) end
  statbuf @stat.st_size content !Str.count

  content @Str.count 0 > if
    0                        // offset
    fd @64                   // fd
    MAP_PRIVATE              // flags
    PROT_READ                // prot
    content @Str.count       // length
    NULL                     // addr
    mmap
    cast(ptr)
    content !Str.data

    content @Str.data cast(int) 0 < if
      "ERROR: could not memory map file " eputs file-path-cstr @ptr cstr-to-str eputs "\n" eputs
      1 exit
    end

    content @Str
  else
    0 NULL
  end
end

proc ?file-exist ptr -- bool in
  memory statbuf sizeof(stat) end

  statbuf swap stat

  dup 0 = if
    drop true
    // TODO: introduce ENOENT when the negative number stuff is fixed
  else dup 0 2 - = if*
    drop false
  else
    drop false
    here eputs ": ERROR: ?file-exist failed\n" eputs
    1 exit
  end
end

proc ?shell-safe-char
  int
  --
  bool
in
  memory ch sizeof(int) end
  ch !int
  "@%+=:,./-_"
  while
    over 0 > if
      dup @8 ch @int !=
    else false end
  do
    swap 1 -
    swap 1 ptr+
  end
  drop 0 >
  ch @int isalnum
  lor
end

proc ?shell-safe-str
  int ptr
  --
  bool
in
  while
    over 0 > if
      dup @8 ?shell-safe-char
    else false end
  do
    swap 1 -
    swap 1 ptr+
  end
  drop 0 =
end

proc shell-escape
  int ptr
  --
  int ptr
in
  memory result sizeof(ptr) end
  over over ?shell-safe-str lnot if
    tmp-end result !ptr
    "'" tmp-append drop
      while over 0 > do
        dup @8

        dup '\'' = if
          drop
          "'\"'\"'" tmp-append drop
        else
          1 tmp-alloc !8
        end

        swap 1 -
        swap 1 ptr+
      end drop drop
    "'" tmp-append drop

    tmp-end result @ptr ptr-diff
    result @ptr
  end
end

memory timeit-begin sizeof(timespec) end

proc timeit/from-here in
  timeit-begin CLOCK_MONOTONIC clock_gettime 0 < if
    "ERROR: timeit/start: could not get current time for some reason\n" eputs
    1 exit
  end
end

const 1e9 1000000000 end

// TODO: timeit/to-here has too much responsibility
// Logging and disabling/enabling thereof should not be a concern of it.
proc timeit/to-here
  int ptr // message
  bool    // silent
in
  memory timeit-end sizeof(timespec) end
  lnot if
    timeit-end CLOCK_MONOTONIC clock_gettime 0 < if
      "ERROR: timeit/end: could not get current time for some reason\n" eputs
      1 exit
    end
    puts " took " puts

    timeit-end   timespec.tv_sec ptr+ @int
    timeit-begin timespec.tv_sec ptr+ @int
    -
    1e9 *
    timeit-end   timespec.tv_nsec ptr+ @int
    timeit-begin timespec.tv_nsec ptr+ @int
    -
    +
      dup 1e9 /        putu
      "."              puts
      dup 1e9 % 9      put0u
      " secs\n"        puts
    drop
  else
    drop drop
  end
end

proc str-rfind
  int ptr
  int
  --
  int
in
  memory needle sizeof(int) end
  needle !int

  memory str sizeof(Str) end
  str !Str

  0
  while
    dup str @Str.count < if
      str @Str.count over - 1 -
      str @Str.data swap ptr+
      @8 needle @int !=
    else false end
  do
    1 +
  end

  dup str @Str.count < if
    str @Str.count swap - 1 -
  else
    drop 0 1 -
  end
end

// TODO: `"/" dirname` removes the last slash
proc dirname
  int ptr
  --
  int ptr
in
  memory path sizeof(Str) end
  path !Str

  path @Str '/' str-rfind 1 +
  path !Str.count

  path ?str-empty if
    "." path !Str
  else path @Str "/" streq lnot if*
    path str-chop-one-right
  end

  path @Str
end

proc putch
  int
in
  memory buf sizeof(int) end
  buf !8
  1 buf puts
end

proc remove-ext
  int ptr
  --
  int ptr
in
  memory path sizeof(Str) end
  path !Str

  path @Str '/' str-rfind
  path @Str '.' str-rfind

  over over < if
    swap drop path @Str.data
  else
    drop drop path @Str
  end
end

// # Run external command
//
// Usage example:
// ```porth
// tmp-end
//   "echo"c tmp-append-ptr
//   "uwu"c  tmp-append-ptr
//   NULL    tmp-append-ptr
//   dup true cmd-echoed
// tmp-rewind
// ```
//
// This runs external command `echo uwu`
proc cmd-echoed
  ptr   // array of cstrs reprets the command we are running
  bool  // echo the command to stdout
in
  if
    "[CMD]" puts
    dup while dup @64 0 != do
      " " puts
      dup @64 cast(ptr) cstr-to-str shell-escape puts
      8 ptr+
    end drop
    "\n" puts
  end

  memory wstatus sizeof(u64) end

  fork

  dup 0 = if
    // child process
    drop
    dup @ptr
    swap
    execvp
    // TODO: report that you could not execute the child
  else dup 0 > if*
    // parent process
    drop drop

    while
      NULL
      0
      wstatus
      0 1 - // TODO: replace this with -1 when we support negative numbers
      wait4 0 < if
        "[ERROR] could not wait until the child process has finished executing\n" eputs
        1 exit
      end

      wstatus @int
        dup WIFEXITED if
          dup WEXITSTATUS
            dup 0 > if
              dup exit
            end
          drop

          false // break
        else dup WIFSIGNALED if*
          // TODO: print the signal that terminated the child
          "ERROR: the child process was terminated by a signal\n" eputs
          255 exit

          false // break
        else dup WIFSTOPPED if*
          true  // continue
        else dup WIFCONTINUED if*
          true  // continue
        else
          here eputs ": unreachable\n" eputs
          1 exit
          false // break
        end
      swap drop
    do end
  else
    drop drop
    "[ERROR] could not fork a child\n" eputs
    1 exit
  end
end
