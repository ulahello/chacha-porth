include "core.porth"

const sizeof(word) sizeof(u32) end

const CHACHA_CONST[0] 1634760805 end // b"expa"
const CHACHA_CONST[1] 857760878  end // b"nd-3"
const CHACHA_CONST[2] 2036477234 end // b"2 by"
const CHACHA_CONST[3] 1797285236 end // b"te k"

inline proc xor
  int // x
  int // y
  --
  int // x ^ y
in
  // (x | y) & (!(x & y))
  over over or
  rot rot
  and not
  and
end

// see <https://en.wikipedia.org/wiki/Circular_shift#Implementing_circular_shifts>
inline proc rotl32
  int // value
  int // count
  --
  int // value <<< count
in
  // value << count | value >> (32 - count)
  over over
  32 swap - shr
  rot rot
  shl
  or
end

const sizeof(State.const)   sizeof(word) 4 * end
const sizeof(State.key)     sizeof(word) 8 * end
const sizeof(State.counter) sizeof(word) 1 * end
const sizeof(State.nonce)   sizeof(word) 3 * end

const offsetof(State.const)   sizeof(State.const)   offset end
const offsetof(State.key)     sizeof(State.key)     offset end
const offsetof(State.counter) sizeof(State.counter) offset end
const offsetof(State.nonce)   sizeof(State.nonce)   offset end
const sizeof(State)                                  reset end

inline proc State.const    ptr -- ptr in offsetof(State.const)   ptr+ end
inline proc State.key      ptr -- ptr in offsetof(State.key)     ptr+ end
inline proc State.counter  ptr -- ptr in offsetof(State.counter) ptr+ end
inline proc State.nonce    ptr -- ptr in offsetof(State.nonce)   ptr+ end

inline proc @State.const
  ptr // &State
  --
  int int int int // words (0..4)
in
  State.const
  dup sizeof(word) 0 * ptr+ @32 swap
  dup sizeof(word) 1 * ptr+ @32 swap
  dup sizeof(word) 2 * ptr+ @32 swap
      sizeof(word) 3 * ptr+ @32
end

inline proc @State.key
  ptr // &State
  --
  int int int int int int int int // words (4..11)
in
  State.key
  dup sizeof(word) 0 * ptr+ @32 swap
  dup sizeof(word) 1 * ptr+ @32 swap
  dup sizeof(word) 2 * ptr+ @32 swap
  dup sizeof(word) 3 * ptr+ @32 swap
  dup sizeof(word) 4 * ptr+ @32 swap
  dup sizeof(word) 5 * ptr+ @32 swap
  dup sizeof(word) 6 * ptr+ @32 swap
      sizeof(word) 7 * ptr+ @32
end

inline proc @State.counter
  ptr // &State
  --
  int // word at index 11
in
  State.counter @32
end

inline proc @State.nonce
  ptr // &State
  --
  int int int // words (13..16)
in
  State.nonce
  dup sizeof(word) 0 * ptr+ @32 swap
  dup sizeof(word) 1 * ptr+ @32 swap
      sizeof(word) 2 * ptr+ @32
end

inline proc !State.const
  int int int int // words (0..4)
  ptr // &mut State
in
  State.const
  dup sizeof(word) 3 * ptr+ rot swap !32
  dup sizeof(word) 2 * ptr+ rot swap !32
  dup sizeof(word) 1 * ptr+ rot swap !32
  dup sizeof(word) 0 * ptr+ rot swap !32
  drop
end

inline proc !State.key
  int int int int int int int int // words (4..11)
  ptr // &mut State
in
  State.key
  dup sizeof(word) 7 * ptr+ rot swap !32
  dup sizeof(word) 6 * ptr+ rot swap !32
  dup sizeof(word) 5 * ptr+ rot swap !32
  dup sizeof(word) 4 * ptr+ rot swap !32
  dup sizeof(word) 3 * ptr+ rot swap !32
  dup sizeof(word) 2 * ptr+ rot swap !32
  dup sizeof(word) 1 * ptr+ rot swap !32
  dup sizeof(word) 0 * ptr+ rot swap !32
  drop
end

inline proc !State.counter
  int // word at index 11
  ptr // &mut State
in
  State.counter !32
end

inline proc !State.nonce
  int int int // words (13..16)
  ptr // &mut State
in
  State.nonce
  dup sizeof(word) 2 * ptr+ rot swap !32
  dup sizeof(word) 1 * ptr+ rot swap !32
  dup sizeof(word) 0 * ptr+ rot swap !32
  drop
end

inline proc @State
  ptr // &State
  --
  int int int int int int int int int int int int int int int int // words (0..16)
in
  let src in
    src @State.const
    src @State.key
    src @State.counter
    src @State.nonce
  end
end

inline proc !State
  int int int int int int int int int int int int int int int int // words (0..16)
  ptr // &mut State
in
  let dst in
    dst !State.nonce
    dst !State.counter
    dst !State.key
    dst !State.const
  end
end

proc qr
  int int int int // words (a, b, c, d)
  --
  int int int int // words (a, b, c, d)
in
  memory d sizeof(word) end d !32
  memory c sizeof(word) end c !32
  memory b sizeof(word) end b !32
  memory a sizeof(word) end a !32

  a @32 b @32 +      a !32 // a += b
  d @32 a @32 xor    d !32 // d ^= a
  d @32 16    rotl32 d !32 // d <<<= 16

  c @32 d @32 +      c !32 // c += d
  b @32 c @32 xor    b !32 // b ^= c
  b @32 12    rotl32 b !32 // b <<<= 12

  a @32 b @32 +      a !32 // a += b
  d @32 a @32 xor    d !32 // d ^= a
  d @32 8     rotl32 d !32 // d <<<= 8

  c @32 d @32 +      c !32 // c += d
  b @32 c @32 xor    b !32 // b ^= c
  b @32 7     rotl32 b !32 // b <<<= 7

  a @32
  b @32
  c @32
  d @32
end

inline proc qr_index
  int int int int // indexes (a, b, c, d)
  ptr // &mut State
in
  let a b c d state in
    state sizeof(word) a * ptr+ @32
    state sizeof(word) b * ptr+ @32
    state sizeof(word) c * ptr+ @32
    state sizeof(word) d * ptr+ @32

    qr

    state sizeof(word) d * ptr+ !32
    state sizeof(word) c * ptr+ !32
    state sizeof(word) b * ptr+ !32
    state sizeof(word) a * ptr+ !32
  end
end

inline proc round_odd
  ptr // &mut State
in
  let state in
    0 4  8 12 state qr_index // column 1
    1 5  9 13 state qr_index // column 2
    2 6 10 14 state qr_index // column 3
    3 7 11 15 state qr_index // column 4
  end
end

inline proc round_even
  ptr // &mut State
in
  let state in
    0 5 10 15 state qr_index // diagonal 1
    1 6 11 12 state qr_index // diagonal 2
    2 7  8 13 state qr_index // diagonal 3
    3 4  9 14 state qr_index // diagonal 4
  end
end

inline proc block_no_add
  int // num_rounds
  ptr // &mut State
in
  let rounds state in
    1 while dup rounds <= do
      dup 1 and 0 = if // if current round is even
        state round_even
      else
        state round_odd
      end
      1 +
    end drop
  end
end

// s1 += s2
inline proc state+
  ptr // s1: &mut State
  ptr // s2: &State
in
  let s1 s2 in
    0 while dup sizeof(State) < do
      s1 over ptr+ @32      // push s1[i]
      over s2 swap ptr+ @32 // push s2[i]
      +
      over s1 swap ptr+ !32 // s1[i] = s1[i] + s2[i]

      sizeof(word) +
    end drop
  end
end

proc block
  int // num_rounds
  ptr // &mut State
in
  let rounds state in
    // make copy of original state
    memory original sizeof(State) end
    sizeof(State) state original memcpy drop

    // compute rounds
    rounds state block_no_add

    // add original to current state
    state original state+
  end
end
