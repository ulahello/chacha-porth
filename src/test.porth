// chacha-porth: ChaCha implemenation in Porth (associated test framework)
// copyright (C) 2022-2023 Ula Shipman <ula.hello@mailbox.org>
// licensed under MIT

include "std.porth"
include "chacha.porth"

proc log_test_name int ptr in
  let len ptr in
  "["          puts
  len ptr      puts
  "] " puts
  end
end

const offsetof(Name) sizeof(int) sizeof(ptr) + end

proc !Name
  int ptr // name
  ptr // &mut Names
  int // index into Names
--
in
  offsetof(Name) * ptr+
  let name in
    name sizeof(ptr) ptr+ !ptr name !int
  end
end

proc @Name
  ptr // &mut Names
  int // index into Names
--
  int ptr // name
in
  offsetof(Name) * ptr+
  let name in
    name @int
    name sizeof(ptr) ptr+ @ptr
  end
end

proc test
  int ptr // test name
  int // length of both expect and got
  ptr // ptr to expect (offset == sizeof(word))
  ptr // ptr to got
  ptr // ptr to [(len ptr); expect/got len]. these are the names of individual elements of expect/got
in
  memory fail sizeof(bool) end
  false fail !bool

  let
    test_name_len test_name_ptr
    len
    expect_ptr
    got_ptr
    names_ptr
  in
    0 while dup len < do
      dup sizeof(word) *
      got_ptr over ptr+ @32
      expect_ptr rot ptr+ @32

      let i got expect in
        got expect != if
          test_name_len test_name_ptr log_test_name

          names_ptr i @Name puts

          ": found "       puts
          got              putu
          " but expected " puts
          expect           putu
          "\n"             puts

          true fail !bool
        end
        i 1 +
      end
    end drop

    test_name_len test_name_ptr log_test_name
    fail @bool if
      "failed\n" puts
      1 exit
    else
      // test passed!
      "passed\n" puts
    end
  end
end

const U32_MAX 4294967295 end

inline proc trunc32 int -- int in
  U32_MAX and
end

proc test_add in
  memory names offsetof(Name) end
    "(unique)" names 0 !Name

  memory got sizeof(word) end
    U32_MAX 1 + trunc32 got !32

  memory expect sizeof(word) end
    0 expect !32

  "add"
  1
  expect
  got
  names
  test
end

proc test_xor in
  memory names offsetof(Name) end
    "(unique)" names 0 !Name

  memory got sizeof(word) end
    42 111 xor got !32

  memory expect sizeof(word) end
    69 expect !32

  "xor"
  1
  expect
  got
  names
  test
end

proc test_rotl in
  memory names offsetof(Name) end
    "(unique)" names 0 !Name

  memory got sizeof(word) end
    4521984 16 rotl32 trunc32 got !32

  memory expect sizeof(word) end
    69 expect !32

  "rotl"
  1
  expect
  got
  names
  test
end

proc test_const in
  memory names offsetof(Name) 4 * end
    "CHACHA_CONST[0]" names 0 !Name
    "CHACHA_CONST[1]" names 1 !Name
    "CHACHA_CONST[2]" names 2 !Name
    "CHACHA_CONST[3]" names 3 !Name

  memory expect sizeof(word) 4 * end
    CHACHA_CONST[0] expect 0 sizeof(word) * ptr+ !32
    CHACHA_CONST[1] expect 1 sizeof(word) * ptr+ !32
    CHACHA_CONST[2] expect 2 sizeof(word) * ptr+ !32
    CHACHA_CONST[3] expect 3 sizeof(word) * ptr+ !32

  "expand 32-byte k"
  let _ got in
    "chacha_const"
    4
    expect
    got
    names
    test
  end
end

proc test_2.1.1 in
  memory names offsetof(Name) 4 * end
    "a" names 0 !Name
    "b" names 1 !Name
    "c" names 2 !Name
    "d" names 3 !Name

  memory qr_got 4 sizeof(word) * end

  memory qr_expect 4 sizeof(word) * end
    3928658676 qr_expect 0 sizeof(word) * ptr+ !32 // a = 0xea2a92f4
    3407673550 qr_expect 1 sizeof(word) * ptr+ !32 // b = 0xcb1cf8ce
    1166100270 qr_expect 2 sizeof(word) * ptr+ !32 // c = 0x4581472e
    1484899515 qr_expect 3 sizeof(word) * ptr+ !32 // d = 0x5881c4bb

  // save quarter round to qr_got
  286331153  // a = 0x11111111
  16909060   // b = 0x01020304
  2609737539 // c = 0x9b8d6f43
  19088743   // d = 0x01234567
  qr
  qr_got 3 sizeof(word) * ptr+ !32
  qr_got 2 sizeof(word) * ptr+ !32
  qr_got 1 sizeof(word) * ptr+ !32
  qr_got 0 sizeof(word) * ptr+ !32

  "2.1.1"
  4
  qr_expect
  qr_got
  names
  test
end

proc test_2.2.1 in
  memory names offsetof(Name) 4 * end
    "a" names 0 !Name
    "b" names 1 !Name
    "c" names 2 !Name
    "d" names 3 !Name

  memory got 4 sizeof(word) * end

  memory expect 4 sizeof(word) * end
    3182986972 expect 0 sizeof(word) * ptr+ !32 // a = 0xbdb886dc
    3484200914 expect 1 sizeof(word) * ptr+ !32 // b = 0xcfacafd2
    3832277632 expect 2 sizeof(word) * ptr+ !32 // c = 0xe46bea80
    3435166841 expect 3 sizeof(word) * ptr+ !32 // d = 0xccc07c79

  memory state sizeof(State) end
    2274701792 // 0x879531e0
    3320640381 // 0xc5ecf37d
    1365533105 // 0x516461b1
    3383111562 // 0xc9a62f8a
    1153568499 // 0x44c20ef3
    865120127  // 0x3390af7f
    3657197835 // 0xd9fc690b
    710897996  // 0x2a5f714c
    1396123495 // 0x53372767
    2953467441 // 0xb00a5631
    2538361882 // 0x974c541a
    899586403  // 0x359e9963
    1553404001 // 0x5c971061
    1029904009 // 0x3d631689
    546888150  // 0x2098d9d6
    2447102752 // 0x91dbd320
  state !State

  // compute quarter round with indexes
  2 7 8 13 state qr_index

  // push a, b, c, d to stack
  state sizeof(word)  2 * ptr+ @32 got 0 sizeof(word) * ptr+ !32
  state sizeof(word)  7 * ptr+ @32 got 1 sizeof(word) * ptr+ !32
  state sizeof(word)  8 * ptr+ @32 got 2 sizeof(word) * ptr+ !32
  state sizeof(word) 13 * ptr+ @32 got 3 sizeof(word) * ptr+ !32

  "2.2.1"
  4
  expect
  got
  names
  test
end

proc test_2.3.2-rounds
  ptr // names
  ptr // init
  ptr // after blocks
in
  let names init after_blocks in
    memory expect sizeof(State) end
     sizeof(State) after_blocks expect memcpy drop

    memory state sizeof(State) end
      sizeof(State) init state memcpy drop

    20 state block_no_add

    "2.3.2-rounds"
    16
    expect
    state
    names
    test
  end
end

proc test_2.3.2-matrix
  ptr // names
  ptr // init
  ptr // after blocks
  ptr // final
in
  let names init after_blocks final in
    memory state sizeof(State) end
      sizeof(State) after_blocks state memcpy drop

    state init state+

    "2.3.2-matrix"
    16
    final
    state
    names
    test
  end
end

proc test_2.3.2-block
  ptr // names
  ptr // init
  ptr // final
in
  let names init final in
    memory state sizeof(State) end
      sizeof(State) init state memcpy drop

    20 state block

    "2.3.2-block"
    16
    final
    state
    names
    test
  end
end

proc test_2.3.2 in
  memory names offsetof(Name) 16 * end
    "0" names 0 !Name
    "1" names 1 !Name
    "2" names 2 !Name
    "3" names 3 !Name
    "4" names 4 !Name
    "5" names 5 !Name
    "6" names 6 !Name
    "7" names 7 !Name
    "8" names 8 !Name
    "9" names 9 !Name
    "10" names 10 !Name
    "11" names 11 !Name
    "12" names 12 !Name
    "13" names 13 !Name
    "14" names 14 !Name
    "15" names 15 !Name

  memory init sizeof(State) end
    1634760805 // 0x61707865
    857760878  // 0x3320646e
    2036477234 // 0x79622d32
    1797285236 // 0x6b206574
    50462976   // 0x03020100
    117835012  // 0x07060504
    185207048  // 0x0b0a0908
    252579084  // 0x0f0e0d0c
    319951120  // 0x13121110
    387323156  // 0x17161514
    454695192  // 0x1b1a1918
    522067228  // 0x1f1e1d1c
    1          // 0x00000001
    150994944  // 0x09000000
    1241513984 // 0x4a000000
    0          // 0x00000000
  init !State

  memory after_blocks sizeof(State) end
    2205644971 // 0x837778ab
    3795375971 // 0xe238d763
    2793071134 // 0xa67ae21e
    1498463023 // 0x5950bb2f
    3304247495 // 0xc4f2d0c7
    4234328879 // 0xfc62bb2f
    2409634044 // 0x8fa018fc
    1063176119 // 0x3f5ec7b7
    861041090  // 0x335271c2
    4069820915 // 0xf29489f3
    3938298108 // 0xeabda8fc
    2196008637 // 0x82e46ebd
    3516666548 // 0xd19c12b4
    2957907678 // 0xb04e16de
    2659438795 // 0x9e83d0cb
    1312575650 // 0x4e3c50a2
  after_blocks !State

  memory final sizeof(State) end
    3840405776 // 0xe4e7f110
    358169553  // 0x15593bd1
    534581072  // 0x1fdd0f50
    3295748259 // 0xc47120a3
    3354710471 // 0xc7f4d1c7
    57196595   // 0x0368c033
    2594841092 // 0x9aaa2204
    1315755203 // 0x4e6cd4c3
    1180992210 // 0x466482d2
    162176775  // 0x09aa9f07
    98026004   // 0x05d7c214
    2718075865 // 0xa2028bd9
    3516666549 // 0xd19c12b5
    3108902622 // 0xb94e16de
    3900952779 // 0xe883d0cb
    1312575650 // 0x4e3c50a2
  final !State

  names init after_blocks test_2.3.2-rounds
  names init after_blocks final test_2.3.2-matrix
  names init final test_2.3.2-block
end

proc main in
  test_add
  test_xor
  test_rotl
  test_const
  test_2.1.1
  test_2.2.1
  test_2.3.2
end
